{
  "scopes" : [
    "All",
    "TopLevel"
  ],
  "summary" : "Easily set edge constraints or vertically\/horizontally constraints for subviews",
  "userSnippet" : true,
  "title" : "View constraint helpers",
  "completionPrefix" : "swift_view-constraint-helpers",
  "language" : "Xcode.SourceCodeLanguage.Swift",
  "contents" : "\/*\n https:\/\/aplus.rs\/2017\/one-solution-for-90pct-auto-layout\/\n By settings both leading and trailing constraint’s priority to 999, you allow Auto Layout engine to temporary ignore the margins.\n That’s my greatest Auto Layout trick:\n \"set priority to 999 for half of your constraints in horizontal and\/or vertical dimension\"\n\n Fixes autolayout issues UIView-Encapsulated-Layout-Width and\n its counterpart UIView-Encapsulated-Layout-Height\n *\/\nextension UIView {\n    public func constraintEdges(to view: UIView, padding: CGFloat = 0, priority: UILayoutPriority = .required) {\n        translatesAutoresizingMaskIntoConstraints = false\n        let bottom = bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -padding)\n        bottom.priority = priority\n        let right = rightAnchor.constraint(equalTo: view.rightAnchor, constant: -padding)\n        right.priority = priority\n        NSLayoutConstraint.activate([\n            topAnchor.constraint(equalTo: view.topAnchor, constant: padding),\n            leftAnchor.constraint(equalTo: view.leftAnchor, constant: padding),\n            bottom,\n            right])\n    }\n\n    public func constraintEdges(to view: UIView, insets: UIEdgeInsets, priority: UILayoutPriority = .required) {\n        translatesAutoresizingMaskIntoConstraints = false\n        let bottom = bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -insets.bottom)\n        bottom.priority = priority\n        let right = rightAnchor.constraint(equalTo: view.rightAnchor, constant: -insets.right)\n        right.priority = priority\n        NSLayoutConstraint.activate([\n            topAnchor.constraint(equalTo: view.topAnchor, constant: insets.top),\n            leftAnchor.constraint(equalTo: view.leftAnchor, constant: insets.left),\n            bottom,\n            right])\n    }\n\n    public func verticalConstraintsForSubviews(_ subviews: [(view: UIView, insets: UIEdgeInsets)], respectSafeArea: Bool = true) {\n        let parentTopAnchor = respectSafeArea ? self.safeAreaLayoutGuide.topAnchor : self.topAnchor\n        let parentBottomAnchor = respectSafeArea ? self.safeAreaLayoutGuide.bottomAnchor : self.bottomAnchor\n        var constraints: [NSLayoutConstraint] = []\n        var previousView: (view: UIView, insets: UIEdgeInsets)!\n\n        translatesAutoresizingMaskIntoConstraints = false\n\n        for (index, subview) in subviews.enumerated() {\n            subview.view.translatesAutoresizingMaskIntoConstraints = false\n            if index == 0 {\n                constraints.append(subview.view.topAnchor.constraint(equalTo: parentTopAnchor, constant: subview.insets.top))\n            } else {\n                constraints.append(subview.view.topAnchor.constraint(equalTo: previousView.view.bottomAnchor, constant: previousView.insets.bottom + subview.insets.top))\n            }\n            constraints.append(contentsOf: [\n                subview.view.leadingAnchor.constraint(equalTo: self.leadingAnchor, constant: subview.insets.left),\n                subview.view.trailingAnchor.constraint(equalTo: self.trailingAnchor, constant: -subview.insets.right)\n            ])\n            if index == subviews.count - 1 {\n                constraints.append(subview.view.bottomAnchor.constraint(lessThanOrEqualTo: parentBottomAnchor, constant: -subview.insets.bottom))\n            }\n            previousView = subview\n        }\n        NSLayoutConstraint.activate(constraints)\n    }\n\n    public func horizontalConstraintsForSubviews(_ subviews: [(view: UIView, insets: UIEdgeInsets)], respectSafeArea: Bool = false) {\n        let parentTopAnchor = respectSafeArea ? self.safeAreaLayoutGuide.topAnchor : self.topAnchor\n        let parentBottomAnchor = respectSafeArea ? self.safeAreaLayoutGuide.bottomAnchor : self.bottomAnchor\n        var constraints: [NSLayoutConstraint] = []\n        var previousView: (view: UIView, insets: UIEdgeInsets)!\n\n        translatesAutoresizingMaskIntoConstraints = false\n\n        for (index, subview) in subviews.enumerated() {\n            subview.view.translatesAutoresizingMaskIntoConstraints = false\n            if index == 0 {\n                constraints.append(subview.view.leadingAnchor.constraint(equalTo: self.leadingAnchor, constant: subview.insets.left))\n            } else {\n                constraints.append(subview.view.leadingAnchor.constraint(equalTo: previousView.view.trailingAnchor, constant: previousView.insets.right + subview.insets.left))\n            }\n            constraints.append(contentsOf: [\n                subview.view.topAnchor.constraint(equalTo: parentTopAnchor, constant: subview.insets.top),\n                subview.view.bottomAnchor.constraint(lessThanOrEqualTo: parentBottomAnchor, constant: -subview.insets.bottom)\n            ])\n            if index == subviews.count - 1 {\n                constraints.append(subview.view.trailingAnchor.constraint(equalTo: self.trailingAnchor, constant: -subview.insets.right))\n            }\n            previousView = subview\n        }\n        NSLayoutConstraint.activate(constraints)\n    }\n}\n",
  "identifier" : "88937835-FBC2-4149-9619-0500067516E2",
  "version" : 2
}