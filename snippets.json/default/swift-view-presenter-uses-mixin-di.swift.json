{
  "scopes" : [
    "TopLevel"
  ],
  "summary" : "Uses & Mixin cake pattern DI with View Presenter",
  "userSnippet" : true,
  "title" : "Uses & Mixin cake pattern with mvp",
  "completionPrefix" : "swift-view-presenter-uses-mixin-di",
  "language" : "Xcode.SourceCodeLanguage.Swift",
  "contents" : "protocol <#protocol-view-name#>View: class {\n\t\n\t}\n\t\n\tprotocol <#protocol-presenter-name#>Presenter {\n\t    func start()\n\t    func setView(_ view: <#protocol-view-name#>View)\n\t}\n\t\n\tprotocol Uses<#protocol-presenter-name#>Presenter {\n\t    var <#name#>Presenter: <#protocol-presenter-name#>Presenter { get }\n\t}\n\t\n\tclass Mixin<#protocol-presenter-name#>Presenter: <#protocol-presenter-name#>Presenter {\n\t\tweak var view: <#ViewName#>View?\n\t    func start() {\n\t\n\t\t}\n\t\n\t\tfunc setView(_ view: <#protocol-view-name#>View) {\n\t        self.view = view\n\t\t}\n\t}\n\t\n\tfinal class <#ViewName#>ViewController: UIViewController, <#ViewName#>View, Uses<#protocol-presenter-name#>Presenter {\n\t\tlet <#name#>Presenter: <#protocol-presenter-name#>Presenter\n\t\tprivate lazy var moduleView: <#name#>ModuleView = <#name#>ModuleView()\n\t\n\t\tinit(presenter: <#protocol-presenter-name#>Presenter) {\n\t\t\t<#name#>Presenter = presenter\n\t\t\tsuper.init(nibName: nil, bundle: nil)\n\t        <#name#>Presenter.setView(self)\n\t\t}\n\t\n\t\trequired init?(coder aDecoder: NSCoder) {\n\t        fatalError(\"init(coder:) has not been implemented\")\n\t    }\n\t\n\t    override func loadView() {\n\t        super.loadView()\n\t        view = moduleView\n\t    }\n\t\n\t    override func viewDidLoad() {\n\t        super.viewDidLoad()\n\t        <#name#>Presenter.start()\n\t    }\n\t}\n\t",
  "identifier" : "FE687587-3A7C-42D5-97DC-F55802C244AF",
  "version" : 2
}